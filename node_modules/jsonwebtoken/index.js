import { createHmac } from 'crypto';

function base64url(obj) {
  return Buffer.from(JSON.stringify(obj))
    .toString('base64')
    .replace(/=/g, '')
    .replace(/\+/g, '-')
    .replace(/\//g, '_');
}

export function sign(payload, secret, options = {}) {
  const header = { alg: 'HS256', typ: 'JWT' };
  const body = { ...payload };
  if (options.expiresIn) {
    const now = Math.floor(Date.now() / 1000);
    body.exp = now + parseExpires(options.expiresIn);
  }
  const headerPart = base64url(header);
  const payloadPart = base64url(body);
  const data = `${headerPart}.${payloadPart}`;
  const signature = createHmac('sha256', secret)
    .update(data)
    .digest('base64')
    .replace(/=/g, '')
    .replace(/\+/g, '-')
    .replace(/\//g, '_');
  return `${data}.${signature}`;
}

function parseExpires(input) {
  if (typeof input === 'number') return input;
  const match = /^([0-9]+)([smhd])$/.exec(input);
  if (!match) return Number(input) || 0;
  const value = Number(match[1]);
  const unit = match[2];
  const multipliers = { s:1, m:60, h:3600, d:86400 };
  return value * (multipliers[unit] || 1);
}

export default { sign };
