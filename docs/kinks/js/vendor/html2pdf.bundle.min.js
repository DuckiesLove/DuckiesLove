(function(g){
  function makePdf(text, filename){
    text = (text || '').replace(/([\\()\n\r])/g, r => ({
      '\\': '\\\\',
      '(': '\\(',
      ')': '\\)',
      '\n': '\\n',
      '\r': ''
    }[r]));
    const header = '%PDF-1.1\n';
    const objects = [];
    const content = `BT /F1 12 Tf 72 720 Td (${text}) Tj ET`;
    const stream = `<< /Length ${content.length} >>\nstream\n${content}\nendstream`;
    objects.push(stream);
    objects.push('<< /Type /Font /Subtype /Type1 /BaseFont /Helvetica >>');
    objects.push('<< /Type /Page /Parent 2 0 R /MediaBox [0 0 612 792] /Resources << /Font << /F1 2 0 R >> >> /Contents 1 0 R >>');
    objects.push('<< /Type /Pages /Kids [3 0 R] /Count 1 >>');
    objects.push('<< /Type /Catalog /Pages 4 0 R >>');
    let body = header;
    const offsets = [0];
    objects.forEach((obj,i)=>{ offsets.push(body.length); body += `${i+1} 0 obj\n${obj}\nendobj\n`; });
    const xref = body.length;
    body += `xref\n0 ${objects.length+1}\n`;
    offsets.forEach(off => { body += off.toString().padStart(10,'0') + ' 00000 n \n'; });
    body += `trailer\n<< /Size ${objects.length+1} /Root ${objects.length} 0 R >>\nstartxref\n${xref}\n%%EOF`;
    const blob = new Blob([body], {type:'application/pdf'});
    const a = document.createElement('a');
    a.href = URL.createObjectURL(blob);
    a.download = filename || 'document.pdf';
    a.style.display = 'none';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
  }
  g.html2pdf = function(){
    const ctx = {opt:{}, el:null};
    return {
      set(o){ ctx.opt = o || {}; return this; },
      from(el){ ctx.el = el; return { save: () => makePdf(ctx.el? ctx.el.innerText : '', ctx.opt.filename) }; }
    };
  };
})(typeof window !== 'undefined' ? window : globalThis);
